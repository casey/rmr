#import "event.h"

#import <GLFW/glfw3.h>

bool event_t::printable() { return key >= 0   && key <= 256;           }
bool event_t::function()  { return key >= 256 && key <= GLFW_KEY_LAST; }

bool event_t::key_space()         { return key == GLFW_KEY_SPACE;         }  // printable
bool event_t::key_apostrophe()    { return key == GLFW_KEY_APOSTROPHE;    } 
bool event_t::key_comma()         { return key == GLFW_KEY_COMMA;         } 
bool event_t::key_minus()         { return key == GLFW_KEY_MINUS;         } 
bool event_t::key_period()        { return key == GLFW_KEY_PERIOD;        } 
bool event_t::key_slash()         { return key == GLFW_KEY_SLASH;         } 
bool event_t::key_0()             { return key == GLFW_KEY_0;             } 
bool event_t::key_1()             { return key == GLFW_KEY_1;             } 
bool event_t::key_2()             { return key == GLFW_KEY_2;             } 
bool event_t::key_3()             { return key == GLFW_KEY_3;             } 
bool event_t::key_4()             { return key == GLFW_KEY_4;             } 
bool event_t::key_5()             { return key == GLFW_KEY_5;             } 
bool event_t::key_6()             { return key == GLFW_KEY_6;             } 
bool event_t::key_7()             { return key == GLFW_KEY_7;             } 
bool event_t::key_8()             { return key == GLFW_KEY_8;             } 
bool event_t::key_9()             { return key == GLFW_KEY_9;             } 
bool event_t::key_semicolon()     { return key == GLFW_KEY_SEMICOLON;     } 
bool event_t::key_equal()         { return key == GLFW_KEY_EQUAL;         } 
bool event_t::key_a()             { return key == GLFW_KEY_A;             } 
bool event_t::key_b()             { return key == GLFW_KEY_B;             } 
bool event_t::key_c()             { return key == GLFW_KEY_C;             } 
bool event_t::key_d()             { return key == GLFW_KEY_D;             } 
bool event_t::key_e()             { return key == GLFW_KEY_E;             } 
bool event_t::key_f()             { return key == GLFW_KEY_F;             } 
bool event_t::key_g()             { return key == GLFW_KEY_G;             } 
bool event_t::key_h()             { return key == GLFW_KEY_H;             } 
bool event_t::key_i()             { return key == GLFW_KEY_I;             } 
bool event_t::key_j()             { return key == GLFW_KEY_J;             } 
bool event_t::key_k()             { return key == GLFW_KEY_K;             } 
bool event_t::key_l()             { return key == GLFW_KEY_L;             } 
bool event_t::key_m()             { return key == GLFW_KEY_M;             } 
bool event_t::key_n()             { return key == GLFW_KEY_N;             } 
bool event_t::key_o()             { return key == GLFW_KEY_O;             } 
bool event_t::key_p()             { return key == GLFW_KEY_P;             } 
bool event_t::key_q()             { return key == GLFW_KEY_Q;             } 
bool event_t::key_r()             { return key == GLFW_KEY_R;             } 
bool event_t::key_s()             { return key == GLFW_KEY_S;             } 
bool event_t::key_t()             { return key == GLFW_KEY_T;             } 
bool event_t::key_u()             { return key == GLFW_KEY_U;             } 
bool event_t::key_v()             { return key == GLFW_KEY_V;             } 
bool event_t::key_w()             { return key == GLFW_KEY_W;             } 
bool event_t::key_x()             { return key == GLFW_KEY_X;             } 
bool event_t::key_y()             { return key == GLFW_KEY_Y;             } 
bool event_t::key_z()             { return key == GLFW_KEY_Z;             } 
bool event_t::key_left_bracket()  { return key == GLFW_KEY_LEFT_BRACKET;  } 
bool event_t::key_backslash()     { return key == GLFW_KEY_BACKSLASH;     } 
bool event_t::key_right_bracket() { return key == GLFW_KEY_RIGHT_BRACKET; } 
bool event_t::key_grave_accent()  { return key == GLFW_KEY_GRAVE_ACCENT;  } 
bool event_t::key_world_1()       { return key == GLFW_KEY_WORLD_1;       } 
bool event_t::key_world_2()       { return key == GLFW_KEY_WORLD_2;       } 
bool event_t::key_escape()        { return key == GLFW_KEY_ESCAPE;        } // function
bool event_t::key_enter()         { return key == GLFW_KEY_ENTER;         } 
bool event_t::key_tab()           { return key == GLFW_KEY_TAB;           } 
bool event_t::key_backspace()     { return key == GLFW_KEY_BACKSPACE;     } 
bool event_t::key_insert()        { return key == GLFW_KEY_INSERT;        } 
bool event_t::key_delete()        { return key == GLFW_KEY_DELETE;        } 
bool event_t::key_right()         { return key == GLFW_KEY_RIGHT;         } 
bool event_t::key_left()          { return key == GLFW_KEY_LEFT;          } 
bool event_t::key_down()          { return key == GLFW_KEY_DOWN;          } 
bool event_t::key_up()            { return key == GLFW_KEY_UP;            } 
bool event_t::key_page_up()       { return key == GLFW_KEY_PAGE_UP;       } 
bool event_t::key_page_down()     { return key == GLFW_KEY_PAGE_DOWN;     } 
bool event_t::key_home()          { return key == GLFW_KEY_HOME;          } 
bool event_t::key_end()           { return key == GLFW_KEY_END;           } 
bool event_t::key_caps_lock()     { return key == GLFW_KEY_CAPS_LOCK;     } 
bool event_t::key_scroll_lock()   { return key == GLFW_KEY_SCROLL_LOCK;   } 
bool event_t::key_num_lock()      { return key == GLFW_KEY_NUM_LOCK;      } 
bool event_t::key_print_screen()  { return key == GLFW_KEY_PRINT_SCREEN;  } 
bool event_t::key_pause()         { return key == GLFW_KEY_PAUSE;         } 
bool event_t::key_f1()            { return key == GLFW_KEY_F1;            } 
bool event_t::key_f2()            { return key == GLFW_KEY_F2;            } 
bool event_t::key_f3()            { return key == GLFW_KEY_F3;            } 
bool event_t::key_f4()            { return key == GLFW_KEY_F4;            } 
bool event_t::key_f5()            { return key == GLFW_KEY_F5;            } 
bool event_t::key_f6()            { return key == GLFW_KEY_F6;            } 
bool event_t::key_f7()            { return key == GLFW_KEY_F7;            } 
bool event_t::key_f8()            { return key == GLFW_KEY_F8;            } 
bool event_t::key_f9()            { return key == GLFW_KEY_F9;            } 
bool event_t::key_f10()           { return key == GLFW_KEY_F10;           } 
bool event_t::key_f11()           { return key == GLFW_KEY_F11;           } 
bool event_t::key_f12()           { return key == GLFW_KEY_F12;           } 
bool event_t::key_f13()           { return key == GLFW_KEY_F13;           } 
bool event_t::key_f14()           { return key == GLFW_KEY_F14;           } 
bool event_t::key_f15()           { return key == GLFW_KEY_F15;           } 
bool event_t::key_f16()           { return key == GLFW_KEY_F16;           } 
bool event_t::key_f17()           { return key == GLFW_KEY_F17;           } 
bool event_t::key_f18()           { return key == GLFW_KEY_F18;           } 
bool event_t::key_f19()           { return key == GLFW_KEY_F19;           } 
bool event_t::key_f20()           { return key == GLFW_KEY_F20;           } 
bool event_t::key_f21()           { return key == GLFW_KEY_F21;           } 
bool event_t::key_f22()           { return key == GLFW_KEY_F22;           } 
bool event_t::key_f23()           { return key == GLFW_KEY_F23;           } 
bool event_t::key_f24()           { return key == GLFW_KEY_F24;           } 
bool event_t::key_f25()           { return key == GLFW_KEY_F25;           } 
bool event_t::key_kp_0()          { return key == GLFW_KEY_KP_0;          } 
bool event_t::key_kp_1()          { return key == GLFW_KEY_KP_1;          } 
bool event_t::key_kp_2()          { return key == GLFW_KEY_KP_2;          } 
bool event_t::key_kp_3()          { return key == GLFW_KEY_KP_3;          } 
bool event_t::key_kp_4()          { return key == GLFW_KEY_KP_4;          } 
bool event_t::key_kp_5()          { return key == GLFW_KEY_KP_5;          } 
bool event_t::key_kp_6()          { return key == GLFW_KEY_KP_6;          } 
bool event_t::key_kp_7()          { return key == GLFW_KEY_KP_7;          } 
bool event_t::key_kp_8()          { return key == GLFW_KEY_KP_8;          } 
bool event_t::key_kp_9()          { return key == GLFW_KEY_KP_9;          } 
bool event_t::key_kp_decimal()    { return key == GLFW_KEY_KP_DECIMAL;    } 
bool event_t::key_kp_divide()     { return key == GLFW_KEY_KP_DIVIDE;     } 
bool event_t::key_kp_multiply()   { return key == GLFW_KEY_KP_MULTIPLY;   } 
bool event_t::key_kp_subtract()   { return key == GLFW_KEY_KP_SUBTRACT;   } 
bool event_t::key_kp_add()        { return key == GLFW_KEY_KP_ADD;        } 
bool event_t::key_kp_enter()      { return key == GLFW_KEY_KP_ENTER;      } 
bool event_t::key_kp_equal()      { return key == GLFW_KEY_KP_EQUAL;      } 
bool event_t::key_left_shift()    { return key == GLFW_KEY_LEFT_SHIFT;    } 
bool event_t::key_left_control()  { return key == GLFW_KEY_LEFT_CONTROL;  } 
bool event_t::key_left_alt()      { return key == GLFW_KEY_LEFT_ALT;      } 
bool event_t::key_left_super()    { return key == GLFW_KEY_LEFT_SUPER;    } 
bool event_t::key_right_shift()   { return key == GLFW_KEY_RIGHT_SHIFT;   } 
bool event_t::key_right_control() { return key == GLFW_KEY_RIGHT_CONTROL; } 
bool event_t::key_right_alt()     { return key == GLFW_KEY_RIGHT_ALT;     } 
bool event_t::key_right_super()   { return key == GLFW_KEY_RIGHT_SUPER;   } 
bool event_t::key_menu()          { return key == GLFW_KEY_MENU;          } 
bool event_t::key_last()          { return key == GLFW_KEY_LAST;          } 
bool event_t::key_unknown()       { return key == GLFW_KEY_UNKNOWN;       } // unknown
